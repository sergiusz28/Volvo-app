#!/usr/bin/env python3
"""
Kompletny przyk≈Çad pracy z Volvo Cars API
========================================

Ten plik pokazuje pe≈Çny przep≈Çyw OAuth2 i wykonywanie operacji na poje≈∫dzie.
"""

import asyncio
import logging
import aiohttp
from volvocarsapi.api import VolvoCarsApi
from volvocarsapi.auth import VolvoCarsAuth
from volvocarsapi.scopes import ALL_SCOPES
from volvo_app.config import config


async def complete_volvo_api_flow():
    """Kompletny przep≈Çyw pracy z Volvo Cars API."""
    
    # Setup logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    # Sprawdzenie konfiguracji
    required_fields = {
        'CLIENT_ID': config.VOLVO_CLIENT_ID,
        'CLIENT_SECRET': config.VOLVO_CLIENT_SECRET, 
        'API_KEY': config.VOLVO_API_KEY,
        'VIN': config.VOLVO_VIN
    }
    
    missing_fields = [name for name, value in required_fields.items() if not value]
    
    if missing_fields:
        logger.error(f"Brak wymaganych p√≥l konfiguracji: {', '.join(missing_fields)}")
        logger.info("Wype≈Çnij plik .env zgodnie z .env.example")
        return
    
    try:
        # Utworzenie sesji HTTP
        async with aiohttp.ClientSession() as session:
            logger.info("üîê Inicjalizacja autoryzacji Volvo...")
            
            # Inicjalizacja klienta autoryzacyjnego
            # U≈ºywamy tylko podstawowych zakres√≥w bez sterowania pojazdem
            basic_scopes = [
                "openid",
                "conve:fuel_status",
                "conve:battery_charge_level", 
                "conve:engine_status",
                "conve:lock_status",
                "conve:vehicle_relation",
                "location:read"
            ]
            
            auth = VolvoCarsAuth(
                websession=session,
                client_id=config.VOLVO_CLIENT_ID,
                client_secret=config.VOLVO_CLIENT_SECRET,
                scopes=basic_scopes,
                redirect_uri=config.VOLVO_REDIRECT_URI
            )
            
            # Krok 1: Pobierz URL autoryzacji
            auth_url = auth.get_auth_uri()
            logger.info(f"URL autoryzacji: {auth_url}")
            
            print("üîê PROCES AUTORYZACJI:")
            print("="*50)
            print(f"1. Otw√≥rz w przeglƒÖdarce: {auth_url}")
            print("2. Zaloguj siƒô do Volvo ID")
            print("3. Zaakceptuj uprawnienia")
            print("4. Skopiuj kod autoryzacji z URL przekierowania")
            print("   (parametr 'code' z URL: http://localhost:8000/callback?code=...)")
            print()
            
            # Krok 2: Pobierz kod autoryzacji od u≈ºytkownika
            auth_code = input("Wprowad≈∫ kod autoryzacji: ").strip()
            
            if not auth_code:
                logger.error("Nie podano kodu autoryzacji")
                return
            
            # Krok 3: Wymie≈Ñ kod na token dostƒôpowy
            logger.info("üîÑ Wymiana kodu na token dostƒôpowy...")
            await auth.async_request_token(auth_code)
            logger.info("‚úÖ Token dostƒôpowy otrzymany!")
            
            # Krok 4: Stw√≥rz klienta API
            logger.info("üöó Inicjalizacja klienta Volvo Cars API...")
            api = VolvoCarsApi(
                websession=session,
                auth=auth,
                api_key=config.VOLVO_API_KEY,
                vin=config.VOLVO_VIN
            )
            
            # Krok 5: Wykonaj przyk≈Çadowe operacje
            await perform_vehicle_operations(api, logger)
            
    except Exception as e:
        logger.error(f"B≈ÇƒÖd podczas pracy z Volvo API: {e}")
        logger.exception("Szczeg√≥≈Çy b≈Çƒôdu:")


async def perform_vehicle_operations(api: VolvoCarsApi, logger):
    """Wykonaj przyk≈Çadowe operacje na poje≈∫dzie."""
    
    print("\nüöó OPERACJE NA POJE≈πDZIE:")
    print("="*50)
    
    try:
        # Pobierz ostrze≈ºenia silnika
        logger.info("üìä Sprawdzanie ostrze≈ºe≈Ñ silnika...")
        engine_warnings = await api.async_get_engine_warnings()
        print(f"Ostrze≈ºenia silnika: {engine_warnings}")
        
        # Pobierz status paliwa
        logger.info("‚õΩ Sprawdzanie poziomu paliwa...")
        fuel_status = await api.async_get_fuel_status()
        print(f"Status paliwa: {fuel_status}")
        
        # Pobierz status baterii (dla hybryd/elektrycznych)
        logger.info("üîã Sprawdzanie statusu baterii...")
        try:
            battery_status = await api.async_get_battery_status()
            print(f"Status baterii: {battery_status}")
        except Exception as e:
            print(f"Status baterii niedostƒôpny (prawdopodobnie pojazd spalinowy): {e}")
        
        # Pobierz lokalizacjƒô pojazdu
        logger.info("üìç Sprawdzanie lokalizacji pojazdu...")
        location = await api.async_get_location()
        print(f"Lokalizacja: {location}")
        
        # Pobierz status zamk√≥w
        logger.info("üîí Sprawdzanie statusu zamk√≥w...")
        lock_status = await api.async_get_lock_status()
        print(f"Status zamk√≥w: {lock_status}")
        
        # Przyk≈Çad sterowania - UWAGA: te operacje wp≈ÇywajƒÖ na prawdziwy pojazd!
        print("\n‚ö†Ô∏è  OPERACJE STEROWANIA (odkomentuj je≈õli chcesz u≈ºyƒá):")
        print("# await api.async_lock()     # Zamknij pojazd")
        print("# await api.async_unlock()   # Otw√≥rz pojazd") 
        print("# await api.async_honk()     # Zasygalizuj")
        print("# await api.async_flash()    # Migaj ≈õwiat≈Çami")
        
    except Exception as e:
        logger.error(f"B≈ÇƒÖd podczas wykonywania operacji: {e}")


def show_required_setup():
    """Poka≈º wymagane kroki konfiguracji."""
    print("üìã WYMAGANA KONFIGURACJA:")
    print("="*50)
    print("1. Zarejestruj siƒô na: https://developer.volvocars.com/")
    print("2. Utw√≥rz aplikacjƒô i otrzymaj:")
    print("   - Client ID (ju≈º masz)")
    print("   - Client Secret (ju≈º masz)")
    print("   - API Key (potrzebne)")
    print("3. Znajd≈∫ VIN swojego pojazdu (17-znakowy kod)")
    print("4. Wype≈Çnij plik .env:")
    print("   VOLVO_API_KEY=tw√≥j_api_key")
    print("   VOLVO_VIN=tw√≥j_vin_pojazdu")
    print()


if __name__ == "__main__":
    show_required_setup()
    print("Uruchamianie aplikacji...")
    asyncio.run(complete_volvo_api_flow())